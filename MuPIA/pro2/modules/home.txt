"""
    
    analysis = input('Select analysis: ')
    input_measure = input('Select a measure: ')
    measure = energy_measure.Measure(input_measure)
    if analysis.strip() == 'Social':
        print("Social analysis for measure %s" % (input_measure))
        #print(measure.get_cost())
        scba = social_investment_analysis.Social(measure.get_cost(), measure.get_lifetime(), measure.get_externalities(), measure.get_energy_conservation())

    elif analysis.strip() == 'Financial': 
        print("Financial analysis for measure %s" % (input_measure))
        fcba = financial_investment_analysis.Financial(measure.get_cost(), measure.get_lifetime(), measure.get_externalities(), measure.get_energy_conservation())
        
    else: 
        analysis = input('Select analysis: ')
    
    #analysis from business perspective
    #persp = investment_analysis_perspective.Perspective(measure.get_cost(), measure.get_lifetime(), measure.get_externalities(), measure.get_energy_conservation(), decimal.Decimal(0.1), decimal.Decimal(0.4))

    externalities = []
    for i in range(0, 25):
        externalities.insert(i, 0)

    energy_conservation = {
            "electricity": 0,
            "diesel_oil": 42.0,
            "motor_gasoline": 0, 
            "natural_gas": 65.0, 
            "biomass": 0
        }

    persp = investment_analysis_perspective.Perspective(33800, 20, externalities, energy_conservation, decimal.Decimal(0.1), decimal.Decimal(0.4))
   
    #check loan 
    #oroi_daneiou = loan.Terms(decimal.Decimal(0.5), 41912, decimal.Decimal(0.4))
    #epistrofi_daneiou = loan.Return()
   
    esco_loan = True
   
    fund_take_over_rate = float(input("Pososto analipsis kostous: "))
    #kostos esco = poso diamoirasmou*initial cost
    esco_cba = esco.Esco(fund_take_over_rate*41912, 8, 0.7, esco_loan)   
"""



ΣΤΟΙΧΕΙΑ ΜΕΤΡΟΥ ΑΠΟ ΠΙΝΑΚΑ ΣΤΗ ΒΑΣΗ

"""
        try: 
            cursor1 = conn.cursor('cursor_backup', cursor_factory=psycopg2.extras.DictCursor)
            cursor1.execute('SELECT * FROM app2_measure LIMIT 2000')
            for row in cursor1:
                if(row[0].strip() == self.measure_name):
                    self.measure_category = row[4]
                    self.measure_cost = row[1]
                    self.measure_lifetime = row[2] 
                    break
        except (Exception, psycopg2.Error) as error :
            print ("Error while connecting to PostgreSQL", error)
        finally:
            #closing database connection cursor.
            if(conn):
                cursor1.close()
"""      